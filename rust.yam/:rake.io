					{	
	"image": "mcr.microsoft.com/devcontainers/javascript-node:0-18",					
	"customizations": {					
	"vscode": {					
	"extensions": [					
	"mads-hartmann.bash-ide-vscode"					
	]					
	}					
	},					
	"features": {					
	"ghcr.io/devcontainers/features/docker-in-docker:2": {}					
	},					
	"remoteUser": "node",					
	"postCreateCommand": "npm install -g @devcontainers/cli"					
	}					
					47  .github/workflows/release.yaml	
	@@ -0,0 +1,47 @@					
	name: "Release dev container features & Generate Documentation"					
	on:					
	workflow_dispatch:					
						
	jobs:					
	deploy:					
	if: ${{ github.ref == 'refs/heads/main' }}					
	runs-on: ubuntu-latest					
	permissions:					
	contents: write					
	pull-requests: write					
	packages: write					
	steps:					
	- uses: actions/checkout@v3					
						
	- name: "Publish Features"					
	uses: devcontainers/action@v1					
	with:					
	publish-features: "true"					
	base-path-to-features: "./src"					
	generate-docs: "true"					
						
	env:					
	GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}					
						
	- name: Create PR for Documentation					
	id: push_image_info					
	env:					
	GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}					
	run: |					
	set -e					
	echo "Start."					
	# Configure git and Push updates					
	git config --global user.email github-actions@github.com					
	git config --global user.name github-actions					
	git config pull.rebase false					
	branch=automated-documentation-update-$GITHUB_RUN_ID					
	git checkout -b $branch					
	message='Automated documentation update'					
	# Add / update and commit					
	git add */**/README.md					
	git commit -m 'Automated documentation update [skip ci]' || export NO_UPDATES=true					
	# Push					
	if [ "$NO_UPDATES" != "true" ] ; then					
	git push origin "$branch"					
	gh pr create --title "$message" --body "$message"					
	fi					
					58  .github/workflows/test.yaml	
	@@ -0,0 +1,58 @@					
	name: "CI - Test Features"					
	on:					
	push:					
	branches:					
	- main					
	pull_request:					
	workflow_dispatch:					
						
	jobs:					
	test-autogenerated:					
	runs-on: ubuntu-latest					
	continue-on-error: true					
	strategy:					
	matrix:					
	features:					
	- color					
	- hello					
	baseImage:					
	- debian:latest					
	- ubuntu:latest					
	- mcr.microsoft.com/devcontainers/base:ubuntu					
	steps:					
	- uses: actions/checkout@v3					
						
	- name: "Install latest devcontainer CLI"					
	run: npm install -g @devcontainers/cli					
						
	- name: "Generating tests for '${{ matrix.features }}' against '${{ matrix.baseImage }}'"					
	run: devcontainer features test --skip-scenarios -f ${{ matrix.features }} -i ${{ matrix.baseImage }} .					
						
	test-scenarios:					
	runs-on: ubuntu-latest					
	continue-on-error: true					
	strategy:					
	matrix:					
	features:					
	- color					
	- hello					
	steps:					
	- uses: actions/checkout@v3					
						
	- name: "Install latest devcontainer CLI"					
	run: npm install -g @devcontainers/cli					
						
	- name: "Generating tests for '${{ matrix.features }}' scenarios"					
	run: devcontainer features test -f ${{ matrix.features }} --skip-autogenerated .					
						
	test-global:					
	runs-on: ubuntu-latest					
	continue-on-error: true					
	steps:					
	- uses: actions/checkout@v3					
						
	- name: "Install latest devcontainer CLI"					
	run: npm install -g @devcontainers/cli					
						
	- name: "Testing global scenarios"					
	run: devcontainer features test --global-scenarios-only .					
					16  .github/workflows/validate.yml	
	@@ -0,0 +1,16 @@					
	name: "Validate devcontainer-feature.json files"					
	on:					
	workflow_dispatch:					
	pull_request:					
						
	jobs:					
	validate:					
	runs-on: ubuntu-latest					
	steps:					
	- uses: actions/checkout@v3					
						
	- name: "Validate devcontainer-feature.json files"					
	uses: devcontainers/action@v1					
	with:					
	validate-only: "true"					
	base-path-to-features: "./src"					
					21  LICENSE	
					184  README.md	
	@@ -0,0 +1,184 @@					
	# Dev Container Features: Self Authoring Template					
						
	> This repo provides a starting point and example for creating your own custom [dev container Features](https://containers.dev/implementors/features/), hosted for free on GitHub Container Registry. The example in this repository follows the [dev container Feature distribution specification](https://containers.dev/implementors/features-distribution/).					
	>					
	> To provide feedback to the specification, please leave a comment [on spec issue #70](https://github.com/devcontainers/spec/issues/70). For more broad feedback regarding dev container Features, please see [spec issue #61](https://github.com/devcontainers/spec/issues/61).					
						
	## Example Contents					
						
	This repository contains a _collection_ of two Features - `hello` and `color`. These Features serve as simple feature implementations. Each sub-section below shows a sample `devcontainer.json` alongside example usage of the Feature.					
						
	### `hello`					
						
	Running `hello` inside the built container will print the greeting provided to it via its `greeting` option.					
						
	```jsonc					
	{					
	"image": "mcr.microsoft.com/devcontainers/base:ubuntu",					
	"features": {					
	"ghcr.io/devcontainers/feature-starter/hello:1": {					
	"greeting": "Hello"					
	}					
	}					
	}					
	```					
						
	```bash					
	$ hello					
						
	Hello, user.					
	```					
						
	### `color`					
						
	Running `color` inside the built container will print your favorite color to standard out.					
						
	```jsonc					
	{					
	"image": "mcr.microsoft.com/devcontainers/base:ubuntu",					
	"features": {					
	"ghcr.io/devcontainers/feature-starter/color:1": {					
	"favorite": "green"					
	}					
	}					
	}					
	```					
						
	```bash					
	$ color					
						
	my favorite color is green					
	```					
						
	## Repo and Feature Structure					
						
	Similar to the [`devcontainers/features`](https://github.com/devcontainers/features) repo, this repository has a `src` folder. Each Feature has its own sub-folder, containing at least a `devcontainer-feature.json` and an entrypoint script `install.sh`.					
						
	```					
	├── src					
	│ ├── hello					
	│ │ ├── devcontainer-feature.json					
	│ │ └── install.sh					
	│ ├── color					
	│ │ ├── devcontainer-feature.json					
	│ │ └── install.sh					
	| ├── ...					
	│ │ ├── devcontainer-feature.json					
	│ │ └── install.sh					
	...					
	```					
						
	An [implementing tool](https://containers.dev/supporting#tools) will composite [the documented dev container properties](https://containers.dev/implementors/features/#devcontainer-feature-json-properties) from the feature's `devcontainer-feature.json` file, and execute in the `install.sh` entrypoint script in the container during build time. Implementing tools are also free to process attributes under the `customizations` property as desired.					
						
	### Options					
						
	All available options for a Feature should be declared in the `devcontainer-feature.json`. The syntax for the `options` property can be found in the [devcontainer Feature json properties reference](https://containers.dev/implementors/features/#devcontainer-feature-json-properties).					
						
	For example, the `color` feature provides an enum of three possible options (`red`, `gold`, `green`). If no option is provided in a user's `devcontainer.json`, the value is set to "red".					
						
	```jsonc					
	{					
	// ...					
	"options": {					
	"favorite": {					
	"type": "string",					
	"enum": [					
	"red",					
	"gold",					
	"green"					
	],					
	"default": "red",					
	"description": "Choose your favorite color."					
	}					
	}					
	}					
	```					
						
	Options are exported as Feature-scoped environment variables. The option name is captialized and sanitized according to [option resolution](https://containers.dev/implementors/features/#option-resolution).					
						
	```bash					
	#!/bin/bash					
						
	echo "Activating feature 'color'"					
	echo "The provided favorite color is: ${FAVORITE}"					
						
	...					
	```					
						
	## Distributing Features					
						
	### Versioning					
						
	Features are individually versioned by the `version` attribute in a Feature's `devcontainer-feature.json`. Features are versioned according to the semver specification. More details can be found in [the dev container Feature specification](https://containers.dev/implementors/features/#versioning).					
						
	### Publishing					
						
	> NOTE: The Distribution spec can be [found here](https://containers.dev/implementors/features-distribution/).					
	>					
	> While any registry [implementing the OCI Distribution spec](https://github.com/opencontainers/distribution-spec) can be used, this template will leverage GHCR (GitHub Container Registry) as the backing registry.					
						
	Features are meant to be easily sharable units of dev container configuration and installation code.					
						
	This repo contains a GitHub Action [workflow](.github/workflows/release.yaml) that will publish each feature to GHCR. By default, each Feature will be prefixed with the `<owner/<repo>` namespace. For example, the two Features in this repository can be referenced in a `devcontainer.json` with:					
						
	```					
	ghcr.io/devcontainers/feature-starter/color:1					
	ghcr.io/devcontainers/feature-starter/hello:1					
	```					
						
	The provided GitHub Action will also publish a third "metadata" package with just the namespace, eg: `ghcr.io/devcontainers/feature-starter`. This contains information useful for tools aiding in Feature discovery.					
						
	`devcontainers/feature-starter`' is known as the feature collection namespace.					
						
	### Marking Feature Public					
						
	Note that by default, GHCR packages are marked as `private`. To stay within the free tier, Features need to be marked as `public`.					
						
	This can be done by navigating to the Feature's "package settings" page in GHCR, and setting the visibility to 'public`. The URL may look something like:					
						
	```					
	https://github.com/users/<owner>/packages/container/<repo>%2F<featureName>/settings					
	```					
						
	<img width="669" alt="image" src="https://user-images.githubusercontent.com/23246594/185244705-232cf86a-bd05-43cb-9c25-07b45b3f4b04.png">					
						
	### Adding Features to the Index					
						
	If you'd like your Features to appear in our [public index](https://containers.dev/features) so that other community members can find them, you can do the following:					
						
	* Go to [github.com/devcontainers/devcontainers.github.io](https://github.com/devcontainers/devcontainers.github.io)					
	* This is the GitHub repo backing the [containers.dev](https://containers.dev/) spec site					
	* Open a PR to modify the [collection-index.yml](https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_data/collection-index.yml) file					
						
	This index is from where [supporting tools](https://containers.dev/supporting) like [VS Code Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) and [GitHub Codespaces](https://github.com/features/codespaces) surface Features for their dev container creation UI.					
						
	#### Using private Features in Codespaces					
						
	For any Features hosted in GHCR that are kept private, the `GITHUB_TOKEN` access token in your environment will need to have `package:read` and `contents:read` for the associated repository.					
						
	Many implementing tools use a broadly scoped access token and will work automatically. GitHub Codespaces uses repo-scoped tokens, and therefore you'll need to add the permissions in `devcontainer.json`					
						
	An example `devcontainer.json` can be found below.					
						
	```jsonc					
	{					
	"image": "mcr.microsoft.com/devcontainers/base:ubuntu",					
	"features": {					
	"ghcr.io/my-org/private-features/hello:1": {					
	"greeting": "Hello"					
	}					
	},					
	"customizations": {					
	"codespaces": {					
	"repositories": {					
	"my-org/private-features": {					
	"permissions": {					
	"packages": "read",					
	"contents": "read"					
	}					
	}					
	}					
	}					
	}					
	}					
	```					
					26  src/color/README.md	
	@@ -0,0 +1,26 @@					
						
	# My Favorite Color (color)					
						
	A feature to remind you of your favorite color					
						
	## Example Usage					
						
	```json					
	"features": {					
	"ghcr.io/devcontainers/feature-starter/color:1": {					
	"version": "latest"					
	}					
	}					
	```					
						
	## Options					
						
	| Options Id | Description | Type | Default Value |					
	|-----|-----|-----|-----|					
	| favorite | Choose your favorite color. | string | red |					
						
						
						
	---					
						
	_Note: This file was auto-generated from the [devcontainer-feature.json](https://github.com/devcontainers/feature-starter/blob/main/src/color/devcontainer-feature.json). Add additional notes to a `NOTES.md`._					
					21  src/color/devcontainer-feature.json	
	@@ -0,0 +1,21 @@					
	{					
	"name": "My Favorite Color",					
	"id": "color",					
	"version": "1.0.3",					
	"description": "A feature to remind you of your favorite color",					
	"options": {					
	"favorite": {					
	"type": "string",					
	"enum": [					
	"red",					
	"gold",					
	"green"					
	],					
	"default": "red",					
	"description": "Choose your favorite color."					
	}					
	},					
	"installsAfter": [					
	"ghcr.io/devcontainers/features/common-utils"					
	]					
	}					
					26  src/color/install.sh	
	@@ -0,0 +1,26 @@					
	#!/bin/sh					
	set -e					
						
	echo "Activating feature 'color'"					
	echo "The provided favorite color is: ${FAVORITE}"					
						
						
	# The 'install.sh' entrypoint script is always executed as the root user.					
	#					
	# These following environment variables are passed in by the dev container CLI.					
	# These may be useful in instances where the context of the final					
	# remoteUser or containerUser is useful.					
	# For more details, see https://containers.dev/implementors/features#user-env-var					
	echo "The effective dev container remoteUser is '$_REMOTE_USER'"					
	echo "The effective dev container remoteUser's home directory is '$_REMOTE_USER_HOME'"					
						
	echo "The effective dev container containerUser is '$_CONTAINER_USER'"					
	echo "The effective dev container containerUser's home directory is '$_CONTAINER_USER_HOME'"					
						
	cat > /usr/local/bin/color \					
	<< EOF					
	#!/bin/sh					
	echo "my favorite color is ${FAVORITE}"					
	EOF					
						
	chmod +x /usr/local/bin/color					
					26  src/hello/README.md	
	@@ -0,0 +1,26 @@					
						
	# Hello, World! (hello)					
						
	A hello world feature					
						
	## Example Usage					
						
	```json					
	"features": {					
	"ghcr.io/devcontainers/feature-starter/hello:1": {					
	"version": "latest"					
	}					
	}					
	```					
						
	## Options					
						
	| Options Id | Description | Type | Default Value |					
	|-----|-----|-----|-----|					
	| greeting | Select a pre-made greeting, or enter your own | string | hey |					
						
						
						
	---					
						
	_Note: This file was auto-generated from the [devcontainer-feature.json](https://github.com/devcontainers/feature-starter/blob/main/src/hello/devcontainer-feature.json). Add additional notes to a `NOTES.md`._					
					22  src/hello/devcontainer-feature.json	
	@@ -0,0 +1,22 @@					
	{					
	"name": "Hello, World!",					
	"id": "hello",					
	"version": "1.0.2",					
	"description": "A hello world feature",					
	"options": {					
	"greeting": {					
	"type": "string",					
	"proposals": [					
	"hey",					
	"hello",					
	"hi",					
	"howdy"					
	],					
	"default": "hey",					
	"description": "Select a pre-made greeting, or enter your own"					
	}					
	},					
	"installsAfter": [					
	"ghcr.io/devcontainers/features/common-utils"					
	]					
	}					
					29  src/hello/install.sh	
	@@ -0,0 +1,29 @@					
	#!/bin/sh					
	set -e					
						
	echo "Activating feature 'hello'"					
						
	GREETING=${GREETING:-undefined}					
	echo "The provided greeting is: $GREETING"					
						
	# The 'install.sh' entrypoint script is always executed as the root user.					
	#					
	# These following environment variables are passed in by the dev container CLI.					
	# These may be useful in instances where the context of the final					
	# remoteUser or containerUser is useful.					
	# For more details, see https://containers.dev/implementors/features#user-env-var					
	echo "The effective dev container remoteUser is '$_REMOTE_USER'"					
	echo "The effective dev container remoteUser's home directory is '$_REMOTE_USER_HOME'"					
						
	echo "The effective dev container containerUser is '$_CONTAINER_USER'"					
	echo "The effective dev container containerUser's home directory is '$_CONTAINER_USER_HOME'"					
						
	cat > /usr/local/bin/hello \					
	<< EOF					
	#!/bin/sh					
	RED='\033[0;91m'					
	NC='\033[0m' # No Color					
	echo "\${RED}${GREETING}, \$(whoami)!\${NC}"					
	EOF					
						
	chmod +x /usr/local/bin/hello					
					33  test/_global/color_and_hello.sh	
	@@ -0,0 +1,33 @@					
	#!/bin/bash					
						
	# The 'test/_global' folder is a special test folder that is not tied to a single feature.					
	#					
	# This test file is executed against a running container constructed					
	# from the value of 'color_and_hello' in the tests/_global/scenarios.json file.					
	#					
	# The value of a scenarios element is any properties available in the 'devcontainer.json'.					
	# Scenarios are useful for testing specific options in a feature, or to test a combination of features.					
	#					
	# This test can be run with the following command (from the root of this repo)					
	# devcontainer features test --global-scenarios-only .					
						
	set -e					
						
	# Optional: Import test library bundled with the devcontainer CLI					
	source dev-container-features-test-lib					
						
	echo -e "The result of the 'color' command will be:\n"					
	color					
	echo -e "The result of the 'hello' command will be:\n"					
	hello					
	echo -e "\n"					
						
	# Feature-specific tests					
	# The 'check' command comes from the dev-container-features-test-lib.					
	check "check purple is my favorite color" bash -c "color | grep 'my favorite color is purple'"					
	check "check I am greeting with 'Greetings'" bash -c "hello | grep 'Greetings, $(whoami)'"					
						
						
	# Report result					
	# If any of the checks above exited with a non-zero exit code, the test will fail.					
	reportResults					
					13  test/_global/scenarios.json	
	@@ -0,0 +1,13 @@					
	{					
	"color_and_hello": {					
	"image": "mcr.microsoft.com/devcontainers/base:ubuntu",					
	"features": {					
	"color": {					
	"favorite": "purple"					
	},					
	"hello": {					
	"greeting": "Greetings"					
	}					
	}					
	}					
	}					
					17  test/color/gold.sh	
	@@ -0,0 +1,17 @@					
	#!/bin/bash					
						
	# This test file will be executed against one of the scenarios devcontainer.json test that					
	# includes the 'color' feature with "favorite": "gold" option.					
						
	set -e					
						
	# Optional: Import test library bundled with the devcontainer CLI					
	source dev-container-features-test-lib					
						
	# Feature-specific tests					
	# The 'check' command comes from the dev-container-features-test-lib.					
	check "execute command" bash -c "color | grep 'my favorite color is gold'"					
						
	# Report result					
	# If any of the checks above exited with a non-zero exit code, the test will fail.					
	reportResults					
					17  test/color/green.sh	
	@@ -0,0 +1,17 @@					
	#!/bin/bash					
						
	# This test file will be executed against one of the scenarios devcontainer.json test that					
	# includes the 'color' feature with "favorite": "green" option.					
						
	set -e					
						
	# Optional: Import test library bundled with the devcontainer CLI					
	source dev-container-features-test-lib					
						
	# Feature-specific tests					
	# The 'check' command comes from the dev-container-features-test-lib.					
	check "execute command" bash -c "color | grep 'my favorite color is green'"					
						
	# Report result					
	# If any of the checks above exited with a non-zero exit code, the test will fail.					
	reportResults					
					31  test/color/my_favorite_color_is_green.sh	
	@@ -0,0 +1,31 @@					
	#!/bin/bash					
						
	# This test file will be executed against after building a container with the					
	# 'my_favorite_color_is_green' scenario in 'test/test/color/scenarios.json'.					
	#					
	# For more information, see: https://github.com/devcontainers/cli/blob/main/docs/features/test.md					
	#					
	# This scenario first uses the 'common-utils' Features to add a new user 'octocat'.					
	# It then installs the 'color' Feature with the FAVORITE option set to 'green' (the default FAVORITE value if none provided is 'red').					
	#					
	#					
	# This test (as well as any of the other scenarios in 'scenarios.json') can be run with the following command:					
	#					
	# devcontainer features test \					
	# --features color \					
	# --skip-autogenerated \					
	# /path/to/this/repo					
						
	set -e					
						
	# Optional: Import test library bundled with the devcontainer CLI					
	# Provides the 'check' and 'reportResults' commands.					
	source dev-container-features-test-lib					
						
	# Feature-specific tests					
	# The 'check' command comes from the dev-container-features-test-lib.					
	check "validate favorite color" color | grep 'my favorite color is green'					
						
	# Report result					
	# If any of the checks above exited with a non-zero exit code, the test will fail.					
	reportResults					
					33  test/color/scenarios.json	
	@@ -0,0 +1,33 @@					
	{					
	"my_favorite_color_is_green": {					
	"image": "mcr.microsoft.com/devcontainers/base:focal",					
	"features": {					
	"ghcr.io/devcontainers/features/common-utils:1": {					
	"installZsh": false,					
	"installOhMyZsh": false,					
	"upgradePackages": false,					
	"username": "octocat"					
	},					
	"color": {					
	"favorite": "green"					
	}					
	},					
	"remoteUser": "octocat"					
	},					
	"gold": {					
	"image": "mcr.microsoft.com/devcontainers/base:ubuntu",					
	"features": {					
	"color": {					
	"favorite": "gold"					
	}					
	}					
	},					
	"green": {					
	"image": "mcr.microsoft.com/devcontainers/base:ubuntu",					
	"features": {					
	"color": {					
	"favorite": "green"					
	}					
	}					
	}					
	}					
					11,592  test/color/test.sh	
					Load diff	
					Large diffs are not rendered by default.	
					17  test/hello/hello.sh	
	@@ -0,0 +1,17 @@					
	#!/bin/bash					
						
	# This test file will be executed against one of the scenarios devcontainer.json test that					
	# includes the 'color' feature with "greeting": "hello" option.					
						
	set -e					
						
	# Optional: Import test library bundled with the devcontainer CLI					
	source dev-container-features-test-lib					
						
	# Feature-specific tests					
	# The 'check' command comes from the dev-container-features-test-lib.					
	check "execute command" bash -c "hello | grep 'hello, $(whoami)!'"					
						
	# Report results					
	# If any of the checks above exited with a non-zero exit code, the test will fail.					
	reportResults					
					10  test/hello/scenarios.json	
	@@ -0,0 +1,10 @@					
	{					
	"hello": {					
	"image": "mcr.microsoft.com/devcontainers/base:ubuntu",					
	"features": {					
	"hello": {					
	"greeting": "hello"					
	}					
	}					
	}					
	}					
					45  test/hello/test.sh	
	@@ -0,0 +1,45 @@					
	#!/bin/bash					
						
	# This test file will be executed against an auto-generated devcontainer.json that					
	# includes the 'hello' Feature with no options.					
	#					
	# For more information, see: https://github.com/devcontainers/cli/blob/main/docs/features/test.md					
	#					
	# Eg:					
	# {					
	# "image": "<..some-base-image...>",					
	# "features": {					
	# "hello": {}					
	# },					
	# "remoteUser": "root"					
	# }					
	#					
	# Thus, the value of all options will fall back to the default value in					
	# the Feature's 'devcontainer-feature.json'.					
	# For the 'hello' feature, that means the default favorite greeting is 'hey'.					
	#					
	# These scripts are run as 'root' by default. Although that can be changed					
	# with the '--remote-user' flag.					
	#					
	# This test can be run with the following command:					
	#					
	# devcontainer features test \					
	# --features hello \					
	# --remote-user root \					
	# --skip-scenarios \					
	# --base-image mcr.microsoft.com/devcontainers/base:ubuntu \					
	# /path/to/this/repo					
						
	set -e					
						
	# Optional: Import test library bundled with the devcontainer CLI					
	# Provides the 'check' and 'reportResults' commands.					
	source dev-container-features-test-lib					
						
	# Feature-specific tests					
	# The 'check' command comes from the dev-container-features-test-lib.					
	check "execute command" bash -c "hello | grep 'hey, $(whoami)!'"					
						
	# Report results					
	# If any of the checks above exited with a non-zero exit code, the test will fail.					
	reportResults					
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						  default_description: Get started, troubleshoot, and make the most of GitHub. Documentation for new users, developers, administrators, and all of GitHub's products.
header:
  github_docs: GitHub Docs
  contact: Contact
  notices:
    ghae_silent_launch: GitHub AE is currently under limited release.
    release_candidate:
      # The version name is rendered before the below text via includes/header-notification.html
      ' is currently available as a release candidate. For more information, see "<a href="/admin/overview/about-upgrades-to-new-releases">About upgrades to new releases</a>."'
    localization_complete:
      We publish frequent updates to our documentation, and translation of this page may still be in progress.
      For the most current information, please visit the
      <a id="to-english-doc" href="/en">English documentation</a>.
    early_access: 📣 Please <b>do not share</b> this URL publicly. This page contains content about an early access feature.
    release_notes_use_latest: Please use the latest release for the latest security, performance, and bug fixes.
    # GHES release notes
    ghes_release_notes_upgrade_patch_only: 📣 This is not the <a href="#{{ latestPatch }}">latest patch release</a> of Enterprise Server.
    ghes_release_notes_upgrade_release_only: 📣 This is not the <a href="/enterprise-server@{{ latestRelease }}/admin/release-notes">latest release</a> of Enterprise Server.
    ghes_release_notes_upgrade_patch_and_release: 📣 This is not the <a href="#{{ latestPatch }}">latest patch release</a> of this release series, and this is not the <a href="/enterprise-server@{{ latestRelease }}/admin/release-notes">latest release</a> of Enterprise Server.
  sign_up_cta: Sign up
  menu: Menu
picker:
  language_picker_default_text: Choose a language
  product_picker_default_text: All products
  version_picker_default_text: Choose a version
release_notes:
  banner_text: GitHub began rolling these changes out to enterprises on
search:
  need_help: Need help?
  placeholder: Search GitHub Docs
  search_results_for: Search results for
  no_content: No content
  matches_found: Results found
  matches_displayed: Matches displayed
  search_error: An error occurred trying to perform the search.
  description: Enter a search term to find it in the GitHub Documentation.
  label: Search GitHub Docs
  n_results: '{n} results'
  one_result: 1 result
homepage:
  explore_by_product: Explore by product
  version_picker: Version
  description: Help for wherever you are on your GitHub journey.
toc:
  getting_started: Getting started
  popular: Popular
  startHere: Start here
  whats_new: What's new
  videos: Videos
  all_changelogs: All changelog posts
pages:
  article_version: 'Article version'
  miniToc: In this article
  all_enterprise_releases: All Enterprise Server releases
  about_versions: About versions
  permissions_statement: Who can use this feature
  video_from_transcript: See video for this transcript
errors:
  oops: Ooops!
  something_went_wrong: It looks like something went wrong.
  we_track_errors: We track these errors automatically, but if the problem persists please feel free to contact us.
  page_doesnt_exist: It looks like this page doesn't exist.
support:
  still_need_help: Still need help?
  contact_support: Contact support
  ask_community: Ask the GitHub community
survey:
  able_to_find: Did this doc help you?
  yes: Yes
  no: No
  comment_yes_label: Let us know what we do well
  comment_no_label: Let us know what we can do better
  optional: Optional
  required: Required
  email_placeholder: email@example.com
  email_label: If we can contact you with more questions, please enter your email address
  email_validation: Please enter a valid email address
  send: Send
  feedback: Thank you! We received your feedback.
  not_support: If you need a reply, please contact support instead.
  privacy_policy: Privacy policy
contribution_cta:
  title: Help us make these docs great!
  body: All GitHub docs are open source. See something that's wrong or unclear? Submit a pull request.
  button: Make a contribution
  or: Or,
  to_guidelines: learn how to contribute.
parameter_table:
  body: Body parameters
  default: Default
  description: Description
  enum_description_title: Can be one of
  headers: Headers
  name: Name
  path: Path parameters
  query: Query parameters
  required: Required
  see_preview_notice: See preview notice
  see_preview_notices: See preview notices
  type: Type
  single_enum_description: Value
products:
  graphql:
    reference:
      implements: Implements
      fields: Fields
      arguments: Arguments
      name: Name
      type: Type
      description: Description
      input_fields: Input fields
      return_fields: Return fields
      implemented_by: Implemented by
      values: Values
      possible_types: Possible types
      preview_notice: Preview notice
      deprecation_notice: Deprecation notice
      preview_period: During the preview period, the API may change without notice.
    overview:
      preview_header: 'To toggle this preview and access the following schema members, you must provide a custom media type in the `Accept` header:'
      preview_schema_members: 'Previewed schema members'
      announced: Announced
      updates: Updates
  rest:
    banner:
      api_versioned: The REST API is now versioned.
      api_version_info: For more information, see "<a href="{{ versionWithApiVersion }}/rest/overview/api-versions">About API versioning</a>."
      ghes_api_versioned: After a site administrator upgrades your Enterprise Server instance to {{ firstGhesReleaseWithApiVersions.versionTitle }} or later, the REST API will be versioned. To learn how to find your instance's version, see "<a href="/{{ currentVersion }}/get-started/learning-about-github/about-versions-of-github-docs#github-enterprise-server">About versions of GitHub Docs</a>".
    versioning:
      about_versions: About REST API versions
    reference:
      in: In
      description: Description
      notes: Notes
      parameters: Parameters
      response: Response
      example_response: Example response
      status_code: Status code
      http_status_code: HTTP response status codes
      code_sample: Code sample
      code_samples: Code samples
      preview_notice: Preview notice
      preview_notices: Preview notices
      preview_header_is_required: This header is <strong>required</strong>
      preview_notice_to_change: This API is under preview and subject to change
      works_with: Works with
      api_reference: REST API reference
      enum_description_title: Can be one of
      required: Required
      headers: Headers
      query: Query parameters
      path: Path parameters
      body: Body parameters
  webhooks:
    action_type_switch_error: There was an error switching webhook action types.
    action_type: Action type
    availability: Availability
    webhook_payload_object: Webhook payload object
    webhook_payload_example: Webhook payload example
    rephrase_availability:
      repository: Repositories
      organization: Organizations
      app: GitHub Apps
      business: Enterprises
      marketplace: GitHub Marketplace
      sponsors_listing: Sponsored accounts
footer:
  all_rights_reserved: All rights reserved
  terms: Terms
  privacy: Privacy
  security: Security
  product:
    heading: Product
    links:
      features: Features
      security: Security
      enterprise: Enterprise
      case_studies: Case Studies
      pricing: Pricing
      resources: Resources
  platform:
    heading: Platform
    links:
      developer_api: Developer API
      partners: Partners
      atom: Atom
      electron: Electron
      github_desktop: GitHub Desktop
  support:
    heading: Support
    links:
      help: Help
      community_forum: Community Forum
      training: Training
      status: Status
      contact_github: Contact GitHub
  company:
    heading: Company
    links:
      about: About
      blog: Blog
      careers: Careers
      press: Press
      shop: Shop
product_landing:
  quickstart: Quickstart
  reference: Reference
  overview: Overview
  guides: Guides
  code_examples: Code examples
  search_code_examples: Search code examples
  search_results_for: Search results for
  matches_displayed: Matches displayed
  show_more: Show more
  explore_people_and_projects: Explore people and projects
  sorry: Sorry, there is no result for
  no_example: It looks like we don't have an example that fits your filter.
  try_another: Try another filter or add your code example.
  no_result: Sorry, there are no guides that match your filter.
  learn: Learn how to add a code example
  communities_using_discussions: Communities on GitHub.com using discussions
  add_your_community: Add your community
  sponsor_community: GitHub Sponsors community
  supported_releases: Supported releases
  release_notes_for: Release notes for
  upgrade_from: Upgrade from
  browse_all_docs: Browse all docs
  browse_all: Browse all
  docs: docs
  explore_release_notes: Explore release notes
  view: View all
  view_transcript: View video transcript
product_guides:
  start_path: Start learning path
  learning_paths: '{{ productMap[currentProduct].name }} learning paths'
  learning_paths_desc: Learning paths are a collection of guides that help you master a particular subject.
  guides: '{{ productMap[currentProduct].name }} guides'
  more_guides: more guides
  load_more: Load more guides
  all_guides: 'All {{ productMap[currentProduct].name }} guides'
  filter_instructions: Filter the guide list using these controls
  filters:
    type: Type
    topic: Topic
    all: All
  guides_found:
    multiple: '{n} guides found'
    one: 1 guide found
    none: No guides found
  guide_types:
    overview: Overview
    quick_start: Quickstart
    tutorial: Tutorial
    how_to: How-to guide
    reference: Reference
learning_track_nav:
  prev_guide: Previous
  next_guide: Next
  more_guides: More guides →
  current_progress: '{i} of {n} in learning path'
toggle_images:
  off: Images are off, click to show
  on: Images are on, click to hide
  hide_single: Hide image
  show_single: Show image
scroll_button:
  scroll_to_top: Scroll to top
