'BEGIN
GLOW4
A'SYNC :rEPOSITORIES/DIPATCH.MD :
Product
Solutions
Open Source
Pricing
Search
Sign in
Sign up
github
/
docs
Public
Code
Issues
91
Pull requests
31
Discussions
Actions
Projects
4
Security
Insights
docs/.github/workflows/azure-preview-env-deploy.yml
@peterbe
peterbe Revert "Composite action to pull in docs-early-access" (#35055)
Latest commit 6545a5b last week
 History
 10 contributors
@mikesurowiec@peterbe@dependabot@rsese@heiskr@Ebonsignori@sarahs@rachmari@hectorsector@mntlty
 226 lines (200 sloc)  9.95 KB

name: Azure - Deploy Preview Environment

# **What it does**: Build and deploy an Azure preview environment for this PR
# **Why we have it**: It's our preview environment deploy mechanism, to docs-internal and docs public repo
# **Who does it impact**: All contributors.

# !!!
# ! This worflow has access to secrets, runs in the public repository, and clones untrusted user code.
# ! Modify with extreme caution
# !!!

on:
  # The advantage of 'pull_request' over 'pull_request_target' is that we
  # can make changes to this file and test them in a pull request, instead
  # of relying on landing it in 'main' first.
  # From a security point of view, its arguably safer this way because
  # unlike 'pull_request_target', these only have secrets if the pull
  # request creator has permission to access secrets.
  pull_request_target:
  merge_group:
  workflow_dispatch:
    inputs:
      PR_NUMBER:
        description: 'PR Number'
        type: string
        required: true
      COMMIT_REF:
        description: 'The commit SHA to build'
        type: string
        required: true

permissions:
  contents: read
  deployments: write

# This allows one deploy workflow to interrupt another
concurrency:
  group: 'preview-env @ ${{ github.head_ref || github.run_id }} for ${{ github.event.number || github.event.inputs.PR_NUMBER }}'
  cancel-in-progress: true

jobs:
  build-and-deploy-azure-preview:
    name: Build and deploy Azure preview environment
    runs-on: ubuntu-latest
    # Ensure this is actually a pull request and not a merge group
    # If its a merge group, report success without doing anything
    # See https://bit.ly/3qB9nZW > If a job in a workflow is skipped due to a conditional, it will report its status as "Success".
    if: |
      (
        (github.event.pull_request.head.sha || github.event.inputs.COMMIT_REF) 
         && (github.event.number || github.event.inputs.PR_NUMBER || github.run_id)
       ) 
       && (github.repository == 'github/docs-internal' || github.repository == 'github/docs')
       &&  github.actor != 'dependabot[bot]'
    timeout-minutes: 15
    environment:
      name: preview-env-${{ github.event.number }}
      # The environment variable is computer later in this job in
      # the "Get preview app info" step.
      # That script sets environment variables which is used by Actions
      # to link a PR to a list of environments later.
      url: ${{ env.APP_URL }}
    env:
      PR_NUMBER: ${{ github.event.number || github.event.inputs.PR_NUMBER || github.run_id }}
      COMMIT_REF: ${{ github.event.pull_request.head.sha || github.event.inputs.COMMIT_REF }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      IS_INTERNAL_BUILD: ${{ github.repository == 'github/docs-internal' }}
      # This may also run in forked repositories, not just 'github/docs'
      IS_PUBLIC_BUILD: ${{ github.repository != 'github/docs-internal' }}
      NONPROD_REGISTRY_USERNAME: ${{ fromJSON('["ghdocs", "ghdocsinternal"]')[github.repository == 'github/docs-internal'] }}

    steps:
      - name: 'Az CLI login'
        uses: azure/login@1f63701bf3e6892515f1b7ce2d2bf1708b46beaf
        with:
          creds: ${{ secrets.NONPROD_AZURE_CREDENTIALS }}

      - name: 'Docker login'
        uses: azure/docker-login@83efeb77770c98b620c73055fbb59b2847e17dc0
        with:
          login-server: ${{ secrets.NONPROD_REGISTRY_SERVER }}
          username: ${{ env.NONPROD_REGISTRY_USERNAME }}
          password: ${{ secrets.NONPROD_REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@95cb08cb2672c73d4ffd2f422e6d11953d2a9c70

      - if: ${{ env.IS_PUBLIC_BUILD == 'true' }}
        name: Check out main branch
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
        with:
          ref: 'main'
          persist-credentials: 'false'

      - if: ${{ env.IS_INTERNAL_BUILD == 'true' }}
        name: Check out PR code
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
        with:
          ref: ${{ env.COMMIT_REF }}
          # To prevent issues with cloning early access content later
          persist-credentials: 'false'

      - name: Get preview app info
        env:
          APP_NAME_SEED: ${{ secrets.PREVIEW_ENV_NAME_SEED }}
        run: .github/actions-scripts/get-preview-app-info.sh

      - name: 'Set env vars'
        run: |
          # Image tag is unique to each workflow run so that it always triggers a new deployment
          echo "DOCKER_IMAGE=${{ secrets.NONPROD_REGISTRY_SERVER }}/${IMAGE_REPO}:${{ env.COMMIT_REF }}-${{ github.run_number }}-${{ github.run_attempt }}" >> $GITHUB_ENV
      - if: ${{ env.IS_INTERNAL_BUILD == 'true' }}
        name: Determine which docs-early-access branch to clone
        id: 'check-early-access'
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        env:
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
        with:
          github-token: ${{ secrets.DOCUBOT_REPO_PAT }}
          result-encoding: string
          script: |
            const { BRANCH_NAME } = process.env
            try {
              const { status } = await github.request('GET /repos/{owner}/{repo}/branches/{branch}', {
                owner: 'github',
                repo: 'docs-early-access',
                branch: BRANCH_NAME,
              })
              if (status !== 200) {
                throw new Error('Received non-200 response from branch GET request')
              }
              console.log(`Using docs-early-access branch '${BRANCH_NAME}'`)
              return BRANCH_NAME
            } catch (e) {
              console.log(`Failed to get docs-early-access branch '${BRANCH_NAME}', 'main' will be used instead.`)
              return 'main'
            }
      - if: ${{ env.IS_INTERNAL_BUILD == 'true' }}
        name: Clone docs-early-access
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
        with:
          repository: github/docs-early-access
          token: ${{ secrets.DOCUBOT_REPO_PAT }}
          path: docs-early-access
          ref: ${{ steps.check-early-access.outputs.result }}

      - if: ${{ env.IS_INTERNAL_BUILD == 'true' }}
        name: Merge docs-early-access repo's folders
        run: .github/actions-scripts/merge-early-access.sh

      - if: ${{ env.IS_PUBLIC_BUILD == 'true' }}
        name: Check out user code to temp directory
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
        with:
          path: ./user-code
          ref: ${{ env.COMMIT_REF }}

      # Move acceptable user changes into our main branch checkout
      - if: ${{ env.IS_PUBLIC_BUILD == 'true' }}
        name: Move acceptable user changes
        run: |
          # Make sure recursive path expansion is enabled
          shopt -s globstar
          rsync -rptovR ./user-code/content/./**/*.md ./content
          rsync -rptovR ./user-code/assets/./**/*.png ./assets
          rsync -rptovR ./user-code/data/./**/*.{yml,md} ./data
          rsync -rptovR ./user-code/components/./**/*.{scss,ts,tsx} ./components
          rsync -rptovR --ignore-missing-args ./user-code/lib/./**/*.{js,ts} ./lib
          rsync -rptovR --ignore-missing-args ./user-code/middleware/./**/*.{js,ts} ./middleware
          rsync -rptovR ./user-code/pages/./**/*.tsx ./pages
          rsync -rptovR ./user-code/stylesheets/./**/*.scss ./stylesheets
      # In addition to making the final image smaller, we also save time by not sending unnecessary files to the docker build context
      - name: 'Prune for preview env'
        run: .github/actions-scripts/prune-for-preview-env.sh

      - name: 'Build and push image'
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          push: true
          target: preview
          tags: ${{ env.DOCKER_IMAGE }}
          # we only pull the `main` cache image
          cache-from: type=registry,ref=${{ secrets.NONPROD_REGISTRY_SERVER }}/${{ github.repository }}:main-preview
          # `main-docker-cache.yml` handles updating the remote cache so we don't pollute it with PR specific code
          cache-to: ''
          build-args: |
            BUILD_SHA=${{ env.COMMIT_REF }}
      # Succeed despite any non-zero exit code (e.g. if there is no deployment to cancel)
      - name: 'Cancel any existing deployments for this PR'
        run: |
          az deployment group cancel --name ${{ env.DEPLOYMENT_NAME }} -g ${{ secrets.PREVIEW_ENV_RESOURCE_GROUP }} || true
      # Deploy ARM template is idempotent
      # Note: once the resources exist the image tag must change for a new deployment to occur (the image tag includes workflow run number, run attempt, as well as sha)
      - name: Run ARM deploy
        uses: azure/arm-deploy@65ae74fb7aec7c680c88ef456811f353adae4d06
        with:
          resourceGroupName: ${{ secrets.PREVIEW_ENV_RESOURCE_GROUP }}
          subscriptionId: ${{ secrets.NONPROD_SUBSCRIPTION_ID }}
          template: ./azure-preview-env-template.json
          deploymentName: ${{ env.DEPLOYMENT_NAME }}
          parameters: appName="${{ env.APP_NAME }}"
            containerImage="${{ env.DOCKER_IMAGE }}"
            dockerRegistryUrl="${{ secrets.NONPROD_REGISTRY_SERVER }}"
            dockerRegistryUsername="${{ env.NONPROD_REGISTRY_USERNAME }}"
            dockerRegistryPassword="${{ secrets.NONPROD_REGISTRY_PASSWORD }}"

      - name: Check that it can reached
        # This introduces a necessary delay. Because the preview evironment
        # URL is announced to the pull request as soon as all the steps
        # finish, what sometimes happens is that a viewer of the PR clicks
        # that link too fast and are confronted with a broken page.
        # It's because there's a delay between the `azure/arm-deploy`
        # and when the server is actually started and can receive and
        # process requests.
        # By introducing a slight "delay" here we avoid announcing a
        # preview environment URL that isn't actually working just yet.
        run: curl --retry-connrefused --retry 5 -I ${{ env.APP_URL }}
Footer
© 2023 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About

name: Repo Syn
on:
  workflow_dispatch:
  schedule:
    - cron: '20,50 * * * *' # Run every hour at 20 and 50 minutes after

permissions:
  contents: write
  pull-requests: write

jobs:
  close-invalid-repo-sync:
    name: Close invalid Repo Sync PRs
    runs-on: ubuntu-latest
    steps:
      - name: Find pull request
        if: ${{ github.repository == 'github/docs' }}
        uses: juliangruber/find-pull-request-action@3a4c7c62101755c3778d397dcb6a760a558992f1
        id: find-pull-request
        with:
          github-token: ${{ secrets.DOCS_BOT_SPAM_VISION }}
          branch: repo-sync
          base: main
          state: open

      - name: Close pull request if unwanted
        if: ${{ github.repository == 'github/docs' && steps.find-pull-request.outputs.number }}
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        with:
          github-token: ${{ secrets.DOCS_BOT_SPAM_VISION }}
          script: |
            const { owner, repo } = context.repo

            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: parseInt(${{ steps.find-pull-request.outputs.number }})
            })

            const prCreator = pr.user.login

            // If the PR creator is the expected account, stop now
            if (prCreator === 'Octomerger') {
              return
            }

            try {
              await github.rest.teams.getMembershipForUserInOrg({
                org: 'github',
                team_slug: 'employees',
                username: prCreator
              })

              // If the PR creator is a GitHub employee, stop now
              return
            } catch (err) {
              // An error will be thrown if the user is not a GitHub employee.
              // That said, we still want to proceed anyway!
            }

            // Close the PR and add the invalid label
            await github.rest.issues.update({
              owner,
              repo,
              issue_number: pr.number,
              labels: ['invalid'],
              state: 'closed'
            })

            // Comment on the PR
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr.number,
              body: "Please leave this `repo-sync` branch to the robots!\n\nI'm going to close this pull request now, but feel free to open a new issue or ask any questions in [discussions](https://github.com/github/docs/discussions)!"
            })

  repo-sync:
    needs: close-invalid-repo-sync
    if: github.repository == 'github/docs-internal' || github.repository == 'github/docs'
    name: Repo Sync
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8

      # Set up npm and run npm ci to get custom husky githooks error
      # messages if they exist. We could also remove these steps
      # because currently we have no hooks with customer error messages.
      # See pull #32064 where they were removed.
      - name: Setup Node.js
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516
        with:
          node-version-file: 'package.json'
          cache: npm
      - name: Install dependencies
        run: npm ci

      - name: Sync repo to branch
        uses: repo-sync/github-sync@3832fe8e2be32372e1b3970bbae8e7079edeec88
        env:
          GITHUB_TOKEN: ${{ secrets.OCTOMERGER_PAT_WITH_REPO_AND_WORKFLOW_SCOPE }}
        with:
          source_repo: ${{ secrets.SOURCE_REPO }} # https://${access_token}@github.com/github/the-other-repo.git
          source_branch: main
          destination_branch: repo-sync
          github_token: ${{ secrets.OCTOMERGER_PAT_WITH_REPO_AND_WORKFLOW_SCOPE }}

      - name: Create pull request
        uses: repo-sync/pull-request@65785d95a5a466e46a9d0708933a3bd51bbf9dde
        env:
          GITHUB_TOKEN: ${{ secrets.OCTOMERGER_PAT_WITH_REPO_AND_WORKFLOW_SCOPE }}
        with:
          source_branch: repo-sync
          destination_branch: main
          pr_title: 'repo sync'
          pr_body: "This is an automated pull request to sync changes between the public and private repos.\n\n:robot: This pull request should be merged (not squashed) to preserve continuity across repos, so please let a bot do the merging!"
          pr_label: automated-reposync-pr
          github_token: ${{ secrets.OCTOMERGER_PAT_WITH_REPO_AND_WORKFLOW_SCOPE }}
          # This will exit 0 if there's no difference between `repo-sync`
          # and `main`. And if so, no PR will be created.
          pr_allow_empty: false

      - name: Find pull request
        uses: juliangruber/find-pull-request-action@3a4c7c62101755c3778d397dcb6a760a558992f1
        id: find-pull-request
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          branch: repo-sync
          base: main
          author: Octomerger
          state: open

      # Because we get far too much spam ;_;
      - name: Lock conversations
        if: ${{ github.repository == 'github/docs' && steps.find-pull-request.outputs.number }}
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        with:
          script: |
            try {
              await github.rest.issues.lock({
                ...context.repo,
                issue_number: parseInt(${{ steps.find-pull-request.outputs.number }}),
                lock_reason: 'spam'
              })
              console.log('Locked the pull request to prevent spam!')
            } catch (error) {
              // Log the error but don't fail the workflow
              console.error(`Failed to lock the pull request. Error: ${error}`)
            }

      # There are cases where the branch becomes out-of-date in between the time this workflow began and when the pull request is created/updated
      - name: Update branch
        if: ${{ steps.find-pull-request.outputs.number }}
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        with:
          github-token: ${{ secrets.OCTOMERGER_PAT_WITH_REPO_AND_WORKFLOW_SCOPE }}
          script: |
            const mainHeadSha = await github.rest.git.getRef({
              ...context.repo,
              ref: 'heads/main'
            })
            console.log(`heads/main sha: ${mainHeadSha.data.object.sha}`)

            const pull = await github.rest.pulls.get({
              ...context.repo,
              pull_number: parseInt(${{ steps.find-pull-request.outputs.number }})
            })
            console.log(`Pull request base sha: ${pull.data.base.sha}`)

            if (mainHeadSha.data.object.sha !== pull.data.base.sha || pull.data.mergeable_state === 'behind') {
              try {
                const updateBranch = await github.rest.pulls.updateBranch({
                  ...context.repo,
                  pull_number: parseInt(${{ steps.find-pull-request.outputs.number }})
                })
                console.log(updateBranch.data.message)
              } catch (error) {
                // When the head branch is modified an error with status 422 is thrown
                // We should retry one more time to update the branch
                if (error.status === 422) {
                  try {
                    const updateBranch = await github.rest.pulls.updateBranch({
                      ...context.repo,
                      pull_number: parseInt(${{ steps.find-pull-request.outputs.number }})
                    })
                    console.log(updateBranch.data.message)
                  } catch (error) {
                    // Only retry once. We'll rely on the update branch workflow to update
                    // this PR in the case of a second failure.
                    console.log(`Retried updating the branch, but an error occurred: ${error}`)
                  }
                } else {
                  // A failed branch update shouldn't fail this worklow.
                  console.log(`An error occurred when updating the branch: ${error}`)
                }
              }
            } else {
              console.log(`Branch is already up-to-date`)
            }

      - name: Check pull request file count after updating
        if: ${{ steps.find-pull-request.outputs.number }}
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        id: pr-files
        env:
          PR_NUMBER: ${{ steps.find-pull-request.outputs.number }}
        with:
          github-token: ${{ secrets.OCTOMERGER_PAT_WITH_REPO_AND_WORKFLOW_SCOPE }}
          result-encoding: string
          script: |
            const { data: prFiles } = await github.rest.pulls.listFiles({
              ...context.repo,
              pull_number: process.env.PR_NUMBER,
            })
            core.setOutput('count', (prFiles && prFiles.length || 0).toString())

      # Sometimes after updating the branch, there aren't any remaining files changed.
      # If not, we should close the PR instead of merging it and triggering deployments.
      - name: Close the pull request if no files remain
        if: ${{ steps.find-pull-request.outputs.number && steps.pr-files.outputs.count == '0' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr close ${{ steps.find-pull-request.outputs.number }} --repo $GITHUB_REPOSITORY

      - name: Approve pull request
        if: ${{ steps.find-pull-request.outputs.number && steps.pr-files.outputs.count != '0' }}
        uses: juliangruber/approve-pull-request-action@c67a4808d52e44ea03656f6646ba24a010304f03
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.find-pull-request.outputs.number }}

      - name: Admin merge the pull request
        if: ${{ steps.find-pull-request.outputs.number && steps.pr-files.outputs.count != '0' }}
        env:
          GITHUB_TOKEN: ${{ secrets.OCTOMERGER_PAT_WITH_REPO_AND_WORKFLOW_SCOPE }}
          PR_NUMBER: ${{ steps.find-pull-request.outputs.number }}
        run: |
          gh pr merge $PR_NUMBER --admin --merge

      - name: Send Slack notification if workflow fails
        uses: someimportantcompany/github-actions-slack-message@1d367080235edfa53df415bd8e0bbab480f29bad
        if: failure()
        with:
          channel: ${{ secrets.DOCS_ALERTS_SLACK_CHANNEL_ID }}
          bot-token: ${{ secrets.SLACK_DOCS_BOT_TOKEN }}
          color: failure
          text: The last repo-sync run for ${{github.repository}} failed. See https://github.com/${{github.repository}}/actions?query=workflow%3A%22Repo+Sync%22
