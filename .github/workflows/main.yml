# Instalar librerías necesarias (esto se hace solo una vez)
!pip install pandas openpyxl

# Importar librerías
import pandas as pd

# Cargar el archivo Excel
archivo_excel = "datos_dashboard.xlsx"  # Cambia esto si tu archivo tiene otro nombre
data = pd.ExcelFile(archivo_excel)

# Verificar las tablas en el archivo Excel
print("Tablas disponibles en tu archivo Excel:")
print(data.sheet_names)

# Cargar una tabla específica (ejemplo: Tabla A)
tabla_a = pd.read_excel(archivo_excel, sheet_name="Tabla A")  # Cambia "Tabla A" según tu archivo

# Ver los primeros datos de la tabla
print(tabla_a.head())

# Cargar las tablas Clima y Asistencia
tabla_clima = pd.read_excel(archivo_excel, sheet_name="Clima")  # Cambia por el nombre real
tabla_asistencia = pd.read_excel(archivo_excel, sheet_name="Asistencia")  # Cambia por el nombre real

# Combinar las dos tablas usando la columna "Fecha" como referencia
datos_combinados = pd.merge(tabla_clima, tabla_asistencia, on="Fecha", how="inner")

# Crear un análisis simple: relacionar clima con asistencia
datos_combinados['Impacto_Clima'] = datos_combinados['Lluvia_Activa'] * datos_combinados['Hora_Critica']

# Ver los resultados
print(datos_combinados.head())

# Exportar los datos combinados a un nuevo archivo CSV
datos_combinados.to_csv("resultados_dashboard.csv", index=False)

print("¡Archivo exportado! Lo puedes descargar desde el lado izquierdo.")

import pandas as pd
import random

# Crear fechas para el mes de enero de 2025
fechas = [f"2025-05-{day:02d}" for day in range(1, 32)]

# Crear estructura de DataFrame con columnas de interés
data = {
    "Fecha": fechas,
    "Hora_Critica": ["N/A" for _ in range(len(fechas))],  # Por completar con horas críticas
    "Condicion_Climatica": ["N/A" for _ in range(len(fechas))],  # Por completar con patrones climáticos
    "Humedad": [0 for _ in range(len(fechas))],  # Por completar con datos reales
    "Lluvia_Activa": [0 for _ in range(len(fechas))],  # Indicador de condiciones de lluvia críticas
    "Asistencia": ["N/A" for _ in range(len(fechas))]  # Por completar con patrones reales de asistencia
}

# Crear el DataFrame
df_base = pd.DataFrame(data)

# Mostrar la estructura para verificar
print(df_base.head(10))

# Guardar la estructura como archivo CSV para que Joe pueda cargarla cuando tenga los datos
df_base.to_csv("estructura_datos_mayo_2025.csv", index=False)

print("La tabla está lista para ser completada por Joe. Se ha guardado como 'estructura_datos_mayo_2025.csv'")

# Asumiendo que 'tablas' contiene las tablas cargadas y la información de clima y horas críticas
# Estas tablas deben estar definidas en alguna combinación lógica de las hojas

# Ejemplo de unir datos climáticos con horas críticas
tabla_climatica = tablas['A']  # Ajustar según el nombre de la tabla de clima
tabla_horas_criticas = tablas['B']  # Ajustar según la tabla de horas críticas

# Combinar ambas tablas en base a una fecha en común u otro criterio
datos_combinados = pd.merge(tabla_climatica, tabla_horas_criticas, on="Fecha", how="inner")

# Crear patrones de análisis
datos_combinados['Riesgo_Climatico'] = datos_combinados['Lluvia_Activa'] * datos_combinados['Hora_Critica']

# Revisar la combinación de patrones
print(datos_combinados.head())

# Calcular patrones históricos de asistencia
patrones_asistencia = datos_combinados.groupby('Condicion_Climatica')['Asistencia'].mean().reset_index()

# Mostrar patrones históricos
print(patrones_asistencia)

# Crear DataFrame final para el Dashboard
df_dashboard = datos_combinados[['Fecha', 'Hora_Critica', 'Condicion_Climatica', 'Riesgo_Climatico', 'Asistencia']]

# Guardar el resultado en un nuevo archivo
df_dashboard.to_csv("datos_dashboard.csv", index=False)

print("Los datos para el Dashboard se han generado y guardado como 'datos_dashboard.csv'")

# Importar librerías necesarias
import pandas as pd

# Cargar tu archivo Excel
archivo_excel = "datos_dashboard.xlsx"  # Nombre del archivo que subiste
data = pd.ExcelFile(archivo_excel)

# Revisar nombres de las hojas (tablas A a L)
print("Tablas disponibles en el archivo Excel:")
print(data.sheet_names)

# Leer cada tabla
tablas = {}
for hoja in data.sheet_names:
    tablas[hoja] = pd.read_excel(archivo_excel, sheet_name=hoja)

# Mostrar las primeras filas de todas las tablas para confirmar que se cargaron
for clave, tabla in tablas.items():
    print(f"Datos en la tabla {clave}:")
    print(tabla.head())
    
    # Procesar patrones críticos climáticos y de asistencia
# Ajustar según las columnas específicas que tengan las tablas

tabla_climatica = tablas["A"]  # Ejemplo de tabla de clima
tabla_asistencia = tablas["B"]  # Ejemplo de tabla de asistencia

# Relacionar datos de clima con las horas críticas
datos_combinados = pd.merge(tabla_climatica, tabla_asistencia, on="Fecha", how="inner")

# Crear análisis, por ejemplo patrones de asistencia y clima
datos_combinados['Analisis_Climatico'] = datos_combinados['Lluvia_Activa'] * datos_combinados['Hora_Critica']

# Revisar los resultados
print(datos_combinados.head())

# Exportar los datos procesados a un CSV
datos_combinados.to_csv("resultados_dashboard.csv", index=False)

print("¡Análisis procesado y listo para visualizar en la Dashboard!")
